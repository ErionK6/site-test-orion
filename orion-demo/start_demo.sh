#!/bin/bash

# --- D√©but du Script de Lancement de la D√©mo Orion ---

echo "üöÄ Bienvenue dans le lanceur de la d√©mo Orion PDA Nexus !"
echo "Ce script va installer les d√©pendances et d√©marrer le serveur de d√©veloppement."

# √âtape 1: V√©rifier si pnpm est install√©
if ! command -v pnpm &> /dev/null
then
    echo "------------------------------------------------------------------"
    echo "‚ö†Ô∏è  pnpm n'a pas √©t√© trouv√©."
    echo "Veuillez installer pnpm globalement en utilisant npm (qui vient avec Node.js)."
    echo "Ex√©cutez cette commande dans votre terminal, puis relancez ce script :"
    echo ""
    echo "    npm install -g pnpm"
    echo ""
    echo "Assurez-vous que Node.js est install√© : https://nodejs.org/"
    echo "------------------------------------------------------------------"
    exit 1
fi

echo "‚úÖ pnpm est install√©."

# √âtape 2: Installer les d√©pendances
echo "üì¶ Installation des d√©pendances avec 'pnpm install'..."
pnpm install
if [ $? -ne 0 ]; then
    echo "‚ùå L'installation des d√©pendances a √©chou√©. Veuillez v√©rifier les erreurs ci-dessus."
    exit 1
fi
echo "‚úÖ D√©pendances install√©es avec succ√®s."


# √âtape 3: Lancer le serveur de d√©veloppement Vite et capturer l'URL
echo "üî• D√©marrage du serveur de d√©veloppement Vite (pnpm dev)..."
echo "Veuillez patienter pendant que le serveur d√©marre."

TEMP_LOG_FILE=$(mktemp)
# Lancer pnpm dev, rediriger stdout et stderr vers le fichier de log, et le mettre en arri√®re-plan
pnpm dev > "$TEMP_LOG_FILE" 2>&1 &
SERVER_PID=$!

LOCAL_URL=""
echo "Attente de l'URL du serveur..."
# Boucle pour v√©rifier la pr√©sence de l'URL dans le fichier de log
for i in {1..30}; do
    # Vite peut afficher "Local:" ou "Network:". On cherche la ligne commen√ßant par "  > Local:"
    if grep -q "Local:" "$TEMP_LOG_FILE"; then
        # Extraire l'URL avec des outils plus robustes
        LOCAL_URL=$(grep "Local:" "$TEMP_LOG_FILE" | head -n 1 | sed -e 's/.*Local:[^h]*//')
        break
    fi
    sleep 1
done

rm "$TEMP_LOG_FILE"

# √âtape 4: Ouvrir l'URL dans Google Chrome
if [ -z "$LOCAL_URL" ]; then
    echo "‚ö†Ô∏è Impossible de d√©tecter l'URL du serveur de d√©veloppement apr√®s 30 secondes."
    # On utilise l'URL par d√©faut de Vite comme fallback
    LOCAL_URL="http://localhost:5173/"
    echo "Utilisation de l'URL par d√©faut : $LOCAL_URL"
fi

echo "‚úÖ Serveur pr√™t. URL : $LOCAL_URL"
echo "üåç Tentative d'ouverture dans Google Chrome..."

# ---- CORRECTION POUR FORCER L'OUVERTURE DE L'URL ----
# La commande 'open -a "Application"' peut ne pas passer l'argument URL si l'app est d√©j√† ouverte.
# La commande 'open <URL>' utilise le navigateur par d√©faut.
# La m√©thode la plus robuste est de sp√©cifier l'ex√©cutable si possible.

OS="`uname`"
case $OS in
  'Linux')
    # Sur Linux, essayer chrome puis xdg-open
    google-chrome "$LOCAL_URL" || xdg-open "$LOCAL_URL"
    ;;
  'Darwin') 
    # Sur macOS, cette commande est plus fiable pour ouvrir une URL dans une app sp√©cifique
    open -na "Google Chrome" --args --new-window "$LOCAL_URL" || open "$LOCAL_URL"
    # -n: Ouvre une nouvelle instance m√™me si l'app est d√©j√† ouverte
    # -a: Sp√©cifie l'application
    # --args: Passe les arguments suivants √† l'application
    # --new-window: Argument pour Chrome pour ouvrir dans une nouvelle fen√™tre (plus fiable)
    ;;
  *) 
    echo "Syst√®me d'exploitation non support√© pour l'ouverture automatique. Veuillez ouvrir manuellement : $LOCAL_URL"
    ;;
esac

echo ""
echo "‚ú® La d√©mo est lanc√©e ! Le serveur tourne en arri√®re-plan."
echo "Pour arr√™ter le serveur, fermez cette fen√™tre de terminal ou ex√©cutez :"
echo "    kill $SERVER_PID"
echo ""

# Garder le script en attente
wait $SERVER_PID
